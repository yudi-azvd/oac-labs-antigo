// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2020 23:00:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Registers
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Registers_vlg_vec_tst();
// constants                                           
// general purpose registers
reg iCLK;
reg iRST;
reg iRegWrite;
reg [4:0] iRs1;
reg [4:0] iRs2;
reg [31:0] iWriteData;
reg [4:0] iWriteRegister;
// wires                                               
wire [31:0] oDado1;
wire [31:0] oDado2;

// assign statements (if any)                          
Registers i1 (
// port map - connection between master ports and signals/registers   
	.iCLK(iCLK),
	.iRST(iRST),
	.iRegWrite(iRegWrite),
	.iRs1(iRs1),
	.iRs2(iRs2),
	.iWriteData(iWriteData),
	.iWriteRegister(iWriteRegister),
	.oDado1(oDado1),
	.oDado2(oDado2)
);
initial 
begin 
#1000000 $finish;
end 

// iCLK
always
begin
	iCLK = 1'b0;
	iCLK = #10000 1'b1;
	#10000;
end 

// iRST
initial
begin
	iRST = 1'b0;
end 

// iRegWrite
initial
begin
	iRegWrite = 1'b1;
end 
// iRs1[ 4 ]
initial
begin
	iRs1[4] = 1'b0;
end 
// iRs1[ 3 ]
initial
begin
	iRs1[3] = 1'b0;
end 
// iRs1[ 2 ]
initial
begin
	iRs1[2] = 1'b1;
end 
// iRs1[ 1 ]
initial
begin
	iRs1[1] = 1'b0;
end 
// iRs1[ 0 ]
initial
begin
	iRs1[0] = 1'b1;
end 
// iRs2[ 4 ]
initial
begin
	iRs2[4] = 1'b0;
end 
// iRs2[ 3 ]
initial
begin
	iRs2[3] = 1'b0;
end 
// iRs2[ 2 ]
initial
begin
	iRs2[2] = 1'b1;
end 
// iRs2[ 1 ]
initial
begin
	iRs2[1] = 1'b0;
end 
// iRs2[ 0 ]
initial
begin
	iRs2[0] = 1'b0;
end 
// iWriteData[ 31 ]
initial
begin
	iWriteData[31] = 1'b1;
end 
// iWriteData[ 30 ]
initial
begin
	iWriteData[30] = 1'b1;
end 
// iWriteData[ 29 ]
initial
begin
	iWriteData[29] = 1'b1;
end 
// iWriteData[ 28 ]
initial
begin
	iWriteData[28] = 1'b1;
end 
// iWriteData[ 27 ]
initial
begin
	iWriteData[27] = 1'b0;
end 
// iWriteData[ 26 ]
initial
begin
	iWriteData[26] = 1'b0;
end 
// iWriteData[ 25 ]
initial
begin
	iWriteData[25] = 1'b0;
end 
// iWriteData[ 24 ]
initial
begin
	iWriteData[24] = 1'b0;
end 
// iWriteData[ 23 ]
initial
begin
	iWriteData[23] = 1'b1;
end 
// iWriteData[ 22 ]
initial
begin
	iWriteData[22] = 1'b1;
end 
// iWriteData[ 21 ]
initial
begin
	iWriteData[21] = 1'b0;
end 
// iWriteData[ 20 ]
initial
begin
	iWriteData[20] = 1'b0;
end 
// iWriteData[ 19 ]
initial
begin
	iWriteData[19] = 1'b1;
end 
// iWriteData[ 18 ]
initial
begin
	iWriteData[18] = 1'b0;
end 
// iWriteData[ 17 ]
initial
begin
	iWriteData[17] = 1'b1;
end 
// iWriteData[ 16 ]
initial
begin
	iWriteData[16] = 1'b0;
end 
// iWriteData[ 15 ]
initial
begin
	iWriteData[15] = 1'b1;
end 
// iWriteData[ 14 ]
initial
begin
	iWriteData[14] = 1'b1;
end 
// iWriteData[ 13 ]
initial
begin
	iWriteData[13] = 1'b1;
end 
// iWriteData[ 12 ]
initial
begin
	iWriteData[12] = 1'b1;
end 
// iWriteData[ 11 ]
initial
begin
	iWriteData[11] = 1'b0;
end 
// iWriteData[ 10 ]
initial
begin
	iWriteData[10] = 1'b0;
end 
// iWriteData[ 9 ]
initial
begin
	iWriteData[9] = 1'b0;
end 
// iWriteData[ 8 ]
initial
begin
	iWriteData[8] = 1'b0;
end 
// iWriteData[ 7 ]
initial
begin
	iWriteData[7] = 1'b1;
end 
// iWriteData[ 6 ]
initial
begin
	iWriteData[6] = 1'b1;
end 
// iWriteData[ 5 ]
initial
begin
	iWriteData[5] = 1'b1;
end 
// iWriteData[ 4 ]
initial
begin
	iWriteData[4] = 1'b1;
end 
// iWriteData[ 3 ]
initial
begin
	iWriteData[3] = 1'b1;
end 
// iWriteData[ 2 ]
initial
begin
	iWriteData[2] = 1'b0;
end 
// iWriteData[ 1 ]
initial
begin
	iWriteData[1] = 1'b1;
end 
// iWriteData[ 0 ]
initial
begin
	iWriteData[0] = 1'b0;
end 
// iWriteRegister[ 4 ]
initial
begin
	iWriteRegister[4] = 1'b0;
end 
// iWriteRegister[ 3 ]
initial
begin
	iWriteRegister[3] = 1'b0;
end 
// iWriteRegister[ 2 ]
initial
begin
	iWriteRegister[2] = 1'b1;
end 
// iWriteRegister[ 1 ]
initial
begin
	iWriteRegister[1] = 1'b0;
end 
// iWriteRegister[ 0 ]
initial
begin
	iWriteRegister[0] = 1'b1;
end 
endmodule

