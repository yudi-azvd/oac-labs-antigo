// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2020 23:55:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] iA;
reg [31:0] iB;
// wires                                               
wire [31:0] oResult;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.iA(iA),
	.iB(iB),
	.oResult(oResult)
);
initial 
begin 
#2000000 $finish;
end 
// iA[ 31 ]
initial
begin
	iA[31] = 1'b0;
end 
// iA[ 30 ]
initial
begin
	iA[30] = 1'b0;
end 
// iA[ 29 ]
initial
begin
	iA[29] = 1'b0;
end 
// iA[ 28 ]
initial
begin
	iA[28] = 1'b0;
end 
// iA[ 27 ]
initial
begin
	iA[27] = 1'b0;
end 
// iA[ 26 ]
initial
begin
	iA[26] = 1'b0;
end 
// iA[ 25 ]
initial
begin
	iA[25] = 1'b0;
end 
// iA[ 24 ]
initial
begin
	iA[24] = 1'b0;
end 
// iA[ 23 ]
initial
begin
	iA[23] = 1'b0;
end 
// iA[ 22 ]
initial
begin
	iA[22] = 1'b0;
end 
// iA[ 21 ]
initial
begin
	iA[21] = 1'b0;
end 
// iA[ 20 ]
initial
begin
	iA[20] = 1'b0;
end 
// iA[ 19 ]
initial
begin
	iA[19] = 1'b0;
end 
// iA[ 18 ]
initial
begin
	iA[18] = 1'b0;
end 
// iA[ 17 ]
initial
begin
	iA[17] = 1'b0;
end 
// iA[ 16 ]
initial
begin
	iA[16] = 1'b0;
end 
// iA[ 15 ]
initial
begin
	iA[15] = 1'b0;
end 
// iA[ 14 ]
initial
begin
	iA[14] = 1'b0;
end 
// iA[ 13 ]
initial
begin
	iA[13] = 1'b0;
end 
// iA[ 12 ]
initial
begin
	iA[12] = 1'b0;
end 
// iA[ 11 ]
initial
begin
	iA[11] = 1'b0;
end 
// iA[ 10 ]
initial
begin
	iA[10] = 1'b0;
end 
// iA[ 9 ]
initial
begin
	iA[9] = 1'b0;
end 
// iA[ 8 ]
initial
begin
	iA[8] = 1'b0;
end 
// iA[ 7 ]
initial
begin
	iA[7] = 1'b0;
end 
// iA[ 6 ]
initial
begin
	iA[6] = 1'b0;
end 
// iA[ 5 ]
initial
begin
	iA[5] = 1'b0;
end 
// iA[ 4 ]
initial
begin
	iA[4] = 1'b0;
end 
// iA[ 3 ]
initial
begin
	iA[3] = 1'b0;
end 
// iA[ 2 ]
initial
begin
	iA[2] = 1'b0;
end 
// iA[ 1 ]
initial
begin
	iA[1] = 1'b0;
end 
// iA[ 0 ]
initial
begin
	iA[0] = 1'b1;
end 
// iB[ 31 ]
initial
begin
	iB[31] = 1'b0;
end 
// iB[ 30 ]
initial
begin
	iB[30] = 1'b0;
end 
// iB[ 29 ]
initial
begin
	iB[29] = 1'b0;
end 
// iB[ 28 ]
initial
begin
	iB[28] = 1'b0;
end 
// iB[ 27 ]
initial
begin
	iB[27] = 1'b0;
end 
// iB[ 26 ]
initial
begin
	iB[26] = 1'b0;
end 
// iB[ 25 ]
initial
begin
	iB[25] = 1'b0;
end 
// iB[ 24 ]
initial
begin
	iB[24] = 1'b0;
end 
// iB[ 23 ]
initial
begin
	iB[23] = 1'b0;
end 
// iB[ 22 ]
initial
begin
	iB[22] = 1'b0;
end 
// iB[ 21 ]
initial
begin
	iB[21] = 1'b0;
end 
// iB[ 20 ]
initial
begin
	iB[20] = 1'b0;
end 
// iB[ 19 ]
initial
begin
	iB[19] = 1'b0;
end 
// iB[ 18 ]
initial
begin
	iB[18] = 1'b0;
end 
// iB[ 17 ]
initial
begin
	iB[17] = 1'b0;
end 
// iB[ 16 ]
initial
begin
	iB[16] = 1'b0;
end 
// iB[ 15 ]
initial
begin
	iB[15] = 1'b0;
end 
// iB[ 14 ]
initial
begin
	iB[14] = 1'b0;
end 
// iB[ 13 ]
initial
begin
	iB[13] = 1'b0;
end 
// iB[ 12 ]
initial
begin
	iB[12] = 1'b0;
end 
// iB[ 11 ]
initial
begin
	iB[11] = 1'b0;
end 
// iB[ 10 ]
initial
begin
	iB[10] = 1'b0;
end 
// iB[ 9 ]
initial
begin
	iB[9] = 1'b0;
end 
// iB[ 8 ]
initial
begin
	iB[8] = 1'b0;
end 
// iB[ 7 ]
initial
begin
	iB[7] = 1'b0;
end 
// iB[ 6 ]
initial
begin
	iB[6] = 1'b0;
end 
// iB[ 5 ]
initial
begin
	iB[5] = 1'b0;
end 
// iB[ 4 ]
initial
begin
	iB[4] = 1'b0;
end 
// iB[ 3 ]
initial
begin
	iB[3] = 1'b0;
end 
// iB[ 2 ]
initial
begin
	iB[2] = 1'b0;
end 
// iB[ 1 ]
initial
begin
	iB[1] = 1'b1;
end 
// iB[ 0 ]
initial
begin
	iB[0] = 1'b0;
end 
endmodule

