// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2020 01:56:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CamDado
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CamDado_vlg_vec_tst();
// constants                                           
// general purpose registers
reg iCLK;
reg [31:0] iPCInicial;
reg iRST;
reg [2:0] wCMem2Reg;
reg wCMemRead;
reg wCMemWrite;
reg [1:0] wCOrigBUla;
reg [2:0] wCOrigPC;
reg wCRegWrite;
reg [4:0] wCULAControl;
// wires                                               
wire [31:0] mpc;
wire [31:0] wInst;

// assign statements (if any)                          
CamDado i1 (
// port map - connection between master ports and signals/registers   
	.iCLK(iCLK),
	.iPCInicial(iPCInicial),
	.iRST(iRST),
	.mpc(mpc),
	.wCMem2Reg(wCMem2Reg),
	.wCMemRead(wCMemRead),
	.wCMemWrite(wCMemWrite),
	.wCOrigBUla(wCOrigBUla),
	.wCOrigPC(wCOrigPC),
	.wCRegWrite(wCRegWrite),
	.wCULAControl(wCULAControl),
	.wInst(wInst)
);
initial 
begin 
#1000000 $finish;
end 

// iCLK
always
begin
	iCLK = 1'b0;
	iCLK = #10000 1'b1;
	#10000;
end 
// iPCInicial[ 31 ]
initial
begin
	iPCInicial[31] = 1'b0;
end 
// iPCInicial[ 30 ]
initial
begin
	iPCInicial[30] = 1'b0;
end 
// iPCInicial[ 29 ]
initial
begin
	iPCInicial[29] = 1'b0;
end 
// iPCInicial[ 28 ]
initial
begin
	iPCInicial[28] = 1'b0;
end 
// iPCInicial[ 27 ]
initial
begin
	iPCInicial[27] = 1'b0;
end 
// iPCInicial[ 26 ]
initial
begin
	iPCInicial[26] = 1'b0;
end 
// iPCInicial[ 25 ]
initial
begin
	iPCInicial[25] = 1'b0;
end 
// iPCInicial[ 24 ]
initial
begin
	iPCInicial[24] = 1'b0;
end 
// iPCInicial[ 23 ]
initial
begin
	iPCInicial[23] = 1'b0;
end 
// iPCInicial[ 22 ]
initial
begin
	iPCInicial[22] = 1'b0;
end 
// iPCInicial[ 21 ]
initial
begin
	iPCInicial[21] = 1'b0;
end 
// iPCInicial[ 20 ]
initial
begin
	iPCInicial[20] = 1'b0;
end 
// iPCInicial[ 19 ]
initial
begin
	iPCInicial[19] = 1'b0;
end 
// iPCInicial[ 18 ]
initial
begin
	iPCInicial[18] = 1'b0;
end 
// iPCInicial[ 17 ]
initial
begin
	iPCInicial[17] = 1'b0;
end 
// iPCInicial[ 16 ]
initial
begin
	iPCInicial[16] = 1'b0;
end 
// iPCInicial[ 15 ]
initial
begin
	iPCInicial[15] = 1'b0;
end 
// iPCInicial[ 14 ]
initial
begin
	iPCInicial[14] = 1'b0;
end 
// iPCInicial[ 13 ]
initial
begin
	iPCInicial[13] = 1'b0;
end 
// iPCInicial[ 12 ]
initial
begin
	iPCInicial[12] = 1'b0;
end 
// iPCInicial[ 11 ]
initial
begin
	iPCInicial[11] = 1'b0;
end 
// iPCInicial[ 10 ]
initial
begin
	iPCInicial[10] = 1'b0;
end 
// iPCInicial[ 9 ]
initial
begin
	iPCInicial[9] = 1'b0;
end 
// iPCInicial[ 8 ]
initial
begin
	iPCInicial[8] = 1'b0;
end 
// iPCInicial[ 7 ]
initial
begin
	iPCInicial[7] = 1'b0;
end 
// iPCInicial[ 6 ]
initial
begin
	iPCInicial[6] = 1'b0;
end 
// iPCInicial[ 5 ]
initial
begin
	iPCInicial[5] = 1'b0;
end 
// iPCInicial[ 4 ]
initial
begin
	iPCInicial[4] = 1'b0;
end 
// iPCInicial[ 3 ]
initial
begin
	iPCInicial[3] = 1'b0;
end 
// iPCInicial[ 2 ]
initial
begin
	iPCInicial[2] = 1'b0;
end 
// iPCInicial[ 1 ]
initial
begin
	iPCInicial[1] = 1'b0;
end 
// iPCInicial[ 0 ]
initial
begin
	iPCInicial[0] = 1'b0;
end 

// iRST
initial
begin
	iRST = 1'b0;
end 
// wCMem2Reg[ 2 ]
initial
begin
	wCMem2Reg[2] = 1'b0;
end 
// wCMem2Reg[ 1 ]
initial
begin
	wCMem2Reg[1] = 1'b0;
end 
// wCMem2Reg[ 0 ]
initial
begin
	wCMem2Reg[0] = 1'b0;
end 

// wCMemRead
initial
begin
	wCMemRead = 1'b0;
end 

// wCMemWrite
initial
begin
	wCMemWrite = 1'b0;
end 
// wCOrigBUla[ 1 ]
initial
begin
	wCOrigBUla[1] = 1'b0;
end 
// wCOrigBUla[ 0 ]
initial
begin
	wCOrigBUla[0] = 1'b0;
end 
// wCOrigPC[ 2 ]
initial
begin
	wCOrigPC[2] = 1'b0;
end 
// wCOrigPC[ 1 ]
initial
begin
	wCOrigPC[1] = 1'b0;
end 
// wCOrigPC[ 0 ]
initial
begin
	wCOrigPC[0] = 1'b0;
end 

// wCRegWrite
initial
begin
	wCRegWrite = 1'b0;
end 
// wCULAControl[ 4 ]
initial
begin
	wCULAControl[4] = 1'b0;
end 
// wCULAControl[ 3 ]
initial
begin
	wCULAControl[3] = 1'b0;
end 
// wCULAControl[ 2 ]
initial
begin
	wCULAControl[2] = 1'b0;
end 
// wCULAControl[ 1 ]
initial
begin
	wCULAControl[1] = 1'b0;
end 
// wCULAControl[ 0 ]
initial
begin
	wCULAControl[0] = 1'b0;
end 
endmodule

